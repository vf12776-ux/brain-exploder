class ProductivityAnalyzer {
  /// –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö GitHub
  Map<String, dynamic> analyzeProductivityPatterns(List<DateTime> commitTimes) {
    if (commitTimes.isEmpty) {
      return {'error': 'No data available'};
    }

    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ - —Å—á–∏—Ç–∞–µ–º –∫–æ–º–º–∏—Ç—ã –ø–æ —á–∞—Å–∞–º –¥–Ω—è
    final hourCounts = List<int>.filled(24, 0);
    
    for (final time in commitTimes) {
      hourCounts[time.hour]++;
    }

    // –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã
    final maxCount = hourCounts.reduce((a, b) => a > b ? a : b);
    final productiveHours = <int>[];
    
    for (int i = 0; i < hourCounts.length; i++) {
      if (hourCounts[i] == maxCount) {
        productiveHours.add(i);
      }
    }

    return {
      'total_commits': commitTimes.length,
      'most_productive_hours': productiveHours,
      'hourly_distribution': hourCounts,
      'recommendation': _generateRecommendation(productiveHours),
    };
  }

  String _generateRecommendation(List<int> productiveHours) {
    if (productiveHours.isEmpty) return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞';
    
    if (productiveHours.any((hour) => hour >= 22 || hour <= 6)) {
      return 'üî• –í—ã —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–æ—á—å—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –¥–Ω–µ–≤–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ª—É—á—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞.';
    } else if (productiveHours.any((hour) => hour >= 9 && hour <= 17)) {
      return '‚úÖ –û—Ç–ª–∏—á–Ω—ã–π –±–∞–ª–∞–Ω—Å! –í—ã –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã –≤ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã.';
    } else {
      return 'üí™ –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —á–∞—Å—ã. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!';
    }
  }
}